/* tslint:disable */
/* eslint-disable */
/**
 * Konek To Book
 * The cats API description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AccessTokenDto
 */
export interface AccessTokenDto {
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AccessTokenDto
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface AuthorDto
 */
export interface AuthorDto {
    /**
     * 
     * @type {string}
     * @memberof AuthorDto
     */
    'A_First_Name': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorDto
     */
    'A_Middle_Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthorDto
     */
    'A_Last_Name': string;
    /**
     * 
     * @type {string}
     * @memberof AuthorDto
     */
    'Location': string;
}
/**
 * 
 * @export
 * @interface BookDto
 */
export interface BookDto {
    /**
     * 
     * @type {number}
     * @memberof BookDto
     */
    'Book_ID'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    'ISBN': string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    'Call_Number'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    'Title': string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    'Edition'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    'DateOfPublication'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    'Pages'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    'Series'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    'Notes'?: string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    'Book_Status': string;
    /**
     * 
     * @type {string}
     * @memberof BookDto
     */
    'Availability': string;
    /**
     * 
     * @type {AuthorDto}
     * @memberof BookDto
     */
    'authors'?: AuthorDto;
    /**
     * 
     * @type {CategoryDto}
     * @memberof BookDto
     */
    'categories'?: CategoryDto;
    /**
     * 
     * @type {PublisherDto}
     * @memberof BookDto
     */
    'publishers'?: PublisherDto;
}
/**
 * 
 * @export
 * @interface BookFinesDto
 */
export interface BookFinesDto {
    /**
     * 
     * @type {number}
     * @memberof BookFinesDto
     */
    'BookFines_ID'?: number;
    /**
     * 
     * @type {string}
     * @memberof BookFinesDto
     */
    'Fine_Date': string;
    /**
     * 
     * @type {string}
     * @memberof BookFinesDto
     */
    'Payment_Amount': string;
    /**
     * 
     * @type {string}
     * @memberof BookFinesDto
     */
    'Payment_Status': string;
    /**
     * 
     * @type {BorrowerDto}
     * @memberof BookFinesDto
     */
    'borrower'?: BorrowerDto;
    /**
     * 
     * @type {BookDto}
     * @memberof BookFinesDto
     */
    'book'?: BookDto;
}
/**
 * 
 * @export
 * @interface BorrowerDto
 */
export interface BorrowerDto {
    /**
     * 
     * @type {number}
     * @memberof BorrowerDto
     */
    'Borrower_ID'?: number;
    /**
     * 
     * @type {string}
     * @memberof BorrowerDto
     */
    'Student_ID': string;
    /**
     * 
     * @type {string}
     * @memberof BorrowerDto
     */
    'B_First_Name': string;
    /**
     * 
     * @type {string}
     * @memberof BorrowerDto
     */
    'B_Middle_Name': string;
    /**
     * 
     * @type {string}
     * @memberof BorrowerDto
     */
    'B_Last_Name': string;
    /**
     * 
     * @type {string}
     * @memberof BorrowerDto
     */
    'YearLevel': string;
    /**
     * 
     * @type {string}
     * @memberof BorrowerDto
     */
    'B_Contact_Number': string;
}
/**
 * 
 * @export
 * @interface CategoryDto
 */
export interface CategoryDto {
    /**
     * 
     * @type {number}
     * @memberof CategoryDto
     */
    'Category_ID'?: number;
    /**
     * 
     * @type {string}
     * @memberof CategoryDto
     */
    'C_Description': string;
}
/**
 * 
 * @export
 * @interface IssuedBookDto
 */
export interface IssuedBookDto {
    /**
     * 
     * @type {number}
     * @memberof IssuedBookDto
     */
    'IssuedBook_ID'?: number;
    /**
     * 
     * @type {string}
     * @memberof IssuedBookDto
     */
    'Title': string;
    /**
     * 
     * @type {string}
     * @memberof IssuedBookDto
     */
    'Borrower_Name': string;
    /**
     * 
     * @type {string}
     * @memberof IssuedBookDto
     */
    'Borrow_Date': string;
    /**
     * 
     * @type {string}
     * @memberof IssuedBookDto
     */
    'Due_Date': string;
    /**
     * 
     * @type {string}
     * @memberof IssuedBookDto
     */
    'Book_Status': string;
    /**
     * 
     * @type {string}
     * @memberof IssuedBookDto
     */
    'IssuedBook_Status': string;
    /**
     * 
     * @type {BorrowerDto}
     * @memberof IssuedBookDto
     */
    'borrowerss'?: BorrowerDto;
    /**
     * 
     * @type {BorrowerDto}
     * @memberof IssuedBookDto
     */
    'fines'?: BorrowerDto;
}
/**
 * 
 * @export
 * @interface PublisherDto
 */
export interface PublisherDto {
    /**
     * 
     * @type {string}
     * @memberof PublisherDto
     */
    'Publisher'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublisherDto
     */
    'DateOfPublication'?: string;
    /**
     * 
     * @type {string}
     * @memberof PublisherDto
     */
    'PlaceOfPublication'?: string;
}
/**
 * 
 * @export
 * @interface RefreshDto
 */
export interface RefreshDto {
    /**
     * 
     * @type {string}
     * @memberof RefreshDto
     */
    'refresh_token': string;
}
/**
 * 
 * @export
 * @interface UserDto
 */
export interface UserDto {
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'U_First_Name': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'U_Middle_Name'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'U_Last_Name': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'Gender': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'U_Birth_Date': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'Address': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'U_Contact_Number'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'User_Type': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'User_Status': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'password': string;
    /**
     * 
     * @type {string}
     * @memberof UserDto
     */
    'refreshToken'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Add new Author
         * @param {AuthorDto} authorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthor: async (authorDto: AuthorDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorDto' is not null or undefined
            assertParamExists('addAuthor', 'authorDto', authorDto)
            const localVarPath = `/author`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Book
         * @param {BookDto} bookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBook: async (bookDto: BookDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookDto' is not null or undefined
            assertParamExists('addBook', 'bookDto', bookDto)
            const localVarPath = `/book`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new fine
         * @param {BookFinesDto} bookFinesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBookFines: async (bookFinesDto: BookFinesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookFinesDto' is not null or undefined
            assertParamExists('addBookFines', 'bookFinesDto', bookFinesDto)
            const localVarPath = `/book-fines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookFinesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Borrower
         * @param {BorrowerDto} borrowerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBorrower: async (borrowerDto: BorrowerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'borrowerDto' is not null or undefined
            assertParamExists('addBorrower', 'borrowerDto', borrowerDto)
            const localVarPath = `/borrower`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(borrowerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Category
         * @param {CategoryDto} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory: async (categoryDto: CategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryDto' is not null or undefined
            assertParamExists('addCategory', 'categoryDto', categoryDto)
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new IssuedBook
         * @param {IssuedBookDto} issuedBookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIssuedBook: async (issuedBookDto: IssuedBookDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issuedBookDto' is not null or undefined
            assertParamExists('addIssuedBook', 'issuedBookDto', issuedBookDto)
            const localVarPath = `/issued-book`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issuedBookDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new Publisher
         * @param {PublisherDto} publisherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPublisher: async (publisherDto: PublisherDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publisherDto' is not null or undefined
            assertParamExists('addPublisher', 'publisherDto', publisherDto)
            const localVarPath = `/publisher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publisherDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add new user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('addUser', 'userDto', userDto)
            const localVarPath = `/user/create`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Authors by ID
         * @param {number} authorID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthor: async (authorID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorID' is not null or undefined
            assertParamExists('deleteAuthor', 'authorID', authorID)
            const localVarPath = `/author/{AuthorID}`
                .replace(`{${"AuthorID"}}`, encodeURIComponent(String(authorID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Books by ID
         * @param {number} bookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBook: async (bookID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookID' is not null or undefined
            assertParamExists('deleteBook', 'bookID', bookID)
            const localVarPath = `/book/{BookID}`
                .replace(`{${"BookID"}}`, encodeURIComponent(String(bookID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update BookFines by ID
         * @param {number} bookFinesID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBookFine: async (bookFinesID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookFinesID' is not null or undefined
            assertParamExists('deleteBookFine', 'bookFinesID', bookFinesID)
            const localVarPath = `/book-fines/{BookFinesID}`
                .replace(`{${"BookFinesID"}}`, encodeURIComponent(String(bookFinesID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Borrowers by ID
         * @param {number} borrowerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBorrower: async (borrowerID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'borrowerID' is not null or undefined
            assertParamExists('deleteBorrower', 'borrowerID', borrowerID)
            const localVarPath = `/borrower/{BorrowerID}`
                .replace(`{${"BorrowerID"}}`, encodeURIComponent(String(borrowerID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Categories by ID
         * @param {number} categoryID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory: async (categoryID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryID' is not null or undefined
            assertParamExists('deleteCategory', 'categoryID', categoryID)
            const localVarPath = `/category/{CategoryID}`
                .replace(`{${"CategoryID"}}`, encodeURIComponent(String(categoryID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update IssuedBooks by ID
         * @param {number} issuedBookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssuedBook: async (issuedBookID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issuedBookID' is not null or undefined
            assertParamExists('deleteIssuedBook', 'issuedBookID', issuedBookID)
            const localVarPath = `/issued-book/{IssuedBookID}`
                .replace(`{${"IssuedBookID"}}`, encodeURIComponent(String(issuedBookID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Publishers by ID
         * @param {number} publisherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePublisher: async (publisherID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publisherID' is not null or undefined
            assertParamExists('deletePublisher', 'publisherID', publisherID)
            const localVarPath = `/publisher/{PublisherID}`
                .replace(`{${"PublisherID"}}`, encodeURIComponent(String(publisherID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Author by ID
         * @param {number} authorID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthor: async (authorID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorID' is not null or undefined
            assertParamExists('getAuthor', 'authorID', authorID)
            const localVarPath = `/author/{AuthorID}`
                .replace(`{${"AuthorID"}}`, encodeURIComponent(String(authorID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthors: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/author`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Book by ID
         * @param {number} bookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBook: async (bookID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookID' is not null or undefined
            assertParamExists('getBook', 'bookID', bookID)
            const localVarPath = `/book/{BookID}`
                .replace(`{${"BookID"}}`, encodeURIComponent(String(bookID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get BookFines by ID
         * @param {number} bookFinesID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookFine: async (bookFinesID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookFinesID' is not null or undefined
            assertParamExists('getBookFine', 'bookFinesID', bookFinesID)
            const localVarPath = `/book-fines/{BookFinesID}`
                .replace(`{${"BookFinesID"}}`, encodeURIComponent(String(bookFinesID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all BookFines
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookFines: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/book-fines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/book`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Borrower by ID
         * @param {number} borrowerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBorrower: async (borrowerID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'borrowerID' is not null or undefined
            assertParamExists('getBorrower', 'borrowerID', borrowerID)
            const localVarPath = `/borrower/{BorrowerID}`
                .replace(`{${"BorrowerID"}}`, encodeURIComponent(String(borrowerID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Borrower
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBorrowers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/borrower`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Category by ID
         * @param {number} categoryID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory: async (categoryID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryID' is not null or undefined
            assertParamExists('getCategory', 'categoryID', categoryID)
            const localVarPath = `/category/{CategoryID}`
                .replace(`{${"CategoryID"}}`, encodeURIComponent(String(categoryID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get IssuedBook by ID
         * @param {number} issuedBookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuedBook: async (issuedBookID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issuedBookID' is not null or undefined
            assertParamExists('getIssuedBook', 'issuedBookID', issuedBookID)
            const localVarPath = `/issued-book/{IssuedBookID}`
                .replace(`{${"IssuedBookID"}}`, encodeURIComponent(String(issuedBookID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all IssuedBook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuedBooks: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/issued-book`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/profile`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Publisher by ID
         * @param {number} publisherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublisher: async (publisherID: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publisherID' is not null or undefined
            assertParamExists('getPublisher', 'publisherID', publisherID)
            const localVarPath = `/publisher/{PublisherID}`
                .replace(`{${"PublisherID"}}`, encodeURIComponent(String(publisherID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all Publisher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/publisher`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getUser', 'id', id)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (username: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('login', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('login', 'password', password)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (username !== undefined) {
                localVarQueryParameter['username'] = username;
            }

            if (password !== undefined) {
                localVarQueryParameter['password'] = password;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken: async (refreshDto: RefreshDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'refreshDto' is not null or undefined
            assertParamExists('refreshToken', 'refreshDto', refreshDto)
            const localVarPath = `/auth/refresh_token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register: async (userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('register', 'userDto', userDto)
            const localVarPath = `/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Author by ID
         * @param {number} authorID 
         * @param {AuthorDto} authorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthor: async (authorID: number, authorDto: AuthorDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authorID' is not null or undefined
            assertParamExists('updateAuthor', 'authorID', authorID)
            // verify required parameter 'authorDto' is not null or undefined
            assertParamExists('updateAuthor', 'authorDto', authorDto)
            const localVarPath = `/author/{AuthorID}`
                .replace(`{${"AuthorID"}}`, encodeURIComponent(String(authorID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authorDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Book by ID
         * @param {number} bookID 
         * @param {BookDto} bookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBook: async (bookID: number, bookDto: BookDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookID' is not null or undefined
            assertParamExists('updateBook', 'bookID', bookID)
            // verify required parameter 'bookDto' is not null or undefined
            assertParamExists('updateBook', 'bookDto', bookDto)
            const localVarPath = `/book/{BookID}`
                .replace(`{${"BookID"}}`, encodeURIComponent(String(bookID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update BookFines by ID
         * @param {number} bookFinesID 
         * @param {BookFinesDto} bookFinesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBookFine: async (bookFinesID: number, bookFinesDto: BookFinesDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bookFinesID' is not null or undefined
            assertParamExists('updateBookFine', 'bookFinesID', bookFinesID)
            // verify required parameter 'bookFinesDto' is not null or undefined
            assertParamExists('updateBookFine', 'bookFinesDto', bookFinesDto)
            const localVarPath = `/book-fines/{BookFinesID}`
                .replace(`{${"BookFinesID"}}`, encodeURIComponent(String(bookFinesID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bookFinesDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Borrower by ID
         * @param {number} borrowerID 
         * @param {BorrowerDto} borrowerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBorrower: async (borrowerID: number, borrowerDto: BorrowerDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'borrowerID' is not null or undefined
            assertParamExists('updateBorrower', 'borrowerID', borrowerID)
            // verify required parameter 'borrowerDto' is not null or undefined
            assertParamExists('updateBorrower', 'borrowerDto', borrowerDto)
            const localVarPath = `/borrower/{BorrowerID}`
                .replace(`{${"BorrowerID"}}`, encodeURIComponent(String(borrowerID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(borrowerDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Category by ID
         * @param {number} categoryID 
         * @param {CategoryDto} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory: async (categoryID: number, categoryDto: CategoryDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'categoryID' is not null or undefined
            assertParamExists('updateCategory', 'categoryID', categoryID)
            // verify required parameter 'categoryDto' is not null or undefined
            assertParamExists('updateCategory', 'categoryDto', categoryDto)
            const localVarPath = `/category/{CategoryID}`
                .replace(`{${"CategoryID"}}`, encodeURIComponent(String(categoryID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(categoryDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update IssuedBook by ID
         * @param {number} issuedBookID 
         * @param {IssuedBookDto} issuedBookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIssuedBook: async (issuedBookID: number, issuedBookDto: IssuedBookDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'issuedBookID' is not null or undefined
            assertParamExists('updateIssuedBook', 'issuedBookID', issuedBookID)
            // verify required parameter 'issuedBookDto' is not null or undefined
            assertParamExists('updateIssuedBook', 'issuedBookDto', issuedBookDto)
            const localVarPath = `/issued-book/{IssuedBookID}`
                .replace(`{${"IssuedBookID"}}`, encodeURIComponent(String(issuedBookID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(issuedBookDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Publisher by ID
         * @param {number} publisherID 
         * @param {PublisherDto} publisherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePublisher: async (publisherID: number, publisherDto: PublisherDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'publisherID' is not null or undefined
            assertParamExists('updatePublisher', 'publisherID', publisherID)
            // verify required parameter 'publisherDto' is not null or undefined
            assertParamExists('updatePublisher', 'publisherDto', publisherDto)
            const localVarPath = `/publisher/{PublisherID}`
                .replace(`{${"PublisherID"}}`, encodeURIComponent(String(publisherID)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(publisherDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user by id
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser: async (id: number, userDto: UserDto, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('updateUser', 'id', id)
            // verify required parameter 'userDto' is not null or undefined
            assertParamExists('updateUser', 'userDto', userDto)
            const localVarPath = `/user/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearer required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Add new Author
         * @param {AuthorDto} authorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addAuthor(authorDto: AuthorDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addAuthor(authorDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Book
         * @param {BookDto} bookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBook(bookDto: BookDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBook(bookDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new fine
         * @param {BookFinesDto} bookFinesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBookFines(bookFinesDto: BookFinesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookFinesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBookFines(bookFinesDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Borrower
         * @param {BorrowerDto} borrowerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addBorrower(borrowerDto: BorrowerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BorrowerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addBorrower(borrowerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Category
         * @param {CategoryDto} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addCategory(categoryDto: CategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addCategory(categoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new IssuedBook
         * @param {IssuedBookDto} issuedBookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addIssuedBook(issuedBookDto: IssuedBookDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuedBookDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addIssuedBook(issuedBookDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new Publisher
         * @param {PublisherDto} publisherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addPublisher(publisherDto: PublisherDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublisherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addPublisher(publisherDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Add new user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async addUser(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.addUser(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Authors by ID
         * @param {number} authorID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteAuthor(authorID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteAuthor(authorID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Books by ID
         * @param {number} bookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBook(bookID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBook(bookID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update BookFines by ID
         * @param {number} bookFinesID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBookFine(bookFinesID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookFinesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBookFine(bookFinesID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Borrowers by ID
         * @param {number} borrowerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBorrower(borrowerID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BorrowerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBorrower(borrowerID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Categories by ID
         * @param {number} categoryID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteCategory(categoryID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteCategory(categoryID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update IssuedBooks by ID
         * @param {number} issuedBookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteIssuedBook(issuedBookID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuedBookDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteIssuedBook(issuedBookID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Publishers by ID
         * @param {number} publisherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deletePublisher(publisherID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublisherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deletePublisher(publisherID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Author by ID
         * @param {number} authorID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthor(authorID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthor(authorID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAuthors(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthorDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAuthors(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Book by ID
         * @param {number} bookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBook(bookID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBook(bookID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get BookFines by ID
         * @param {number} bookFinesID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookFine(bookFinesID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookFinesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookFine(bookFinesID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all BookFines
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBookFines(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookFinesDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBookFines(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBooks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BookDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBooks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Borrower by ID
         * @param {number} borrowerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBorrower(borrowerID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BorrowerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBorrower(borrowerID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Borrower
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBorrowers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BorrowerDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBorrowers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategories(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategories(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Category by ID
         * @param {number} categoryID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCategory(categoryID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CategoryDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCategory(categoryID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get IssuedBook by ID
         * @param {number} issuedBookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssuedBook(issuedBookID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuedBookDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIssuedBook(issuedBookID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all IssuedBook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getIssuedBooks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IssuedBookDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getIssuedBooks(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProfile(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getProfile(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Publisher by ID
         * @param {number} publisherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublisher(publisherID: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublisherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublisher(publisherID, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all Publisher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPublishers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PublisherDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPublishers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUser(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsers(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsers(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(username: string, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(username, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async logout(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.logout(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async refreshToken(refreshDto: RefreshDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.refreshToken(refreshDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async register(userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.register(userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Author by ID
         * @param {number} authorID 
         * @param {AuthorDto} authorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateAuthor(authorID: number, authorDto: AuthorDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateAuthor(authorID, authorDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Book by ID
         * @param {number} bookID 
         * @param {BookDto} bookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBook(bookID: number, bookDto: BookDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBook(bookID, bookDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update BookFines by ID
         * @param {number} bookFinesID 
         * @param {BookFinesDto} bookFinesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBookFine(bookFinesID: number, bookFinesDto: BookFinesDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBookFine(bookFinesID, bookFinesDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Borrower by ID
         * @param {number} borrowerID 
         * @param {BorrowerDto} borrowerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateBorrower(borrowerID: number, borrowerDto: BorrowerDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateBorrower(borrowerID, borrowerDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Category by ID
         * @param {number} categoryID 
         * @param {CategoryDto} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateCategory(categoryID: number, categoryDto: CategoryDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateCategory(categoryID, categoryDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update IssuedBook by ID
         * @param {number} issuedBookID 
         * @param {IssuedBookDto} issuedBookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateIssuedBook(issuedBookID: number, issuedBookDto: IssuedBookDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateIssuedBook(issuedBookID, issuedBookDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Publisher by ID
         * @param {number} publisherID 
         * @param {PublisherDto} publisherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updatePublisher(publisherID: number, publisherDto: PublisherDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updatePublisher(publisherID, publisherDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update user by id
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateUser(id: number, userDto: UserDto, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateUser(id, userDto, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Add new Author
         * @param {AuthorDto} authorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addAuthor(authorDto: AuthorDto, options?: any): AxiosPromise<AuthorDto> {
            return localVarFp.addAuthor(authorDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Book
         * @param {BookDto} bookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBook(bookDto: BookDto, options?: any): AxiosPromise<BookDto> {
            return localVarFp.addBook(bookDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new fine
         * @param {BookFinesDto} bookFinesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBookFines(bookFinesDto: BookFinesDto, options?: any): AxiosPromise<BookFinesDto> {
            return localVarFp.addBookFines(bookFinesDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Borrower
         * @param {BorrowerDto} borrowerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addBorrower(borrowerDto: BorrowerDto, options?: any): AxiosPromise<BorrowerDto> {
            return localVarFp.addBorrower(borrowerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Category
         * @param {CategoryDto} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addCategory(categoryDto: CategoryDto, options?: any): AxiosPromise<CategoryDto> {
            return localVarFp.addCategory(categoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new IssuedBook
         * @param {IssuedBookDto} issuedBookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addIssuedBook(issuedBookDto: IssuedBookDto, options?: any): AxiosPromise<IssuedBookDto> {
            return localVarFp.addIssuedBook(issuedBookDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new Publisher
         * @param {PublisherDto} publisherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addPublisher(publisherDto: PublisherDto, options?: any): AxiosPromise<PublisherDto> {
            return localVarFp.addPublisher(publisherDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add new user
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        addUser(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.addUser(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Authors by ID
         * @param {number} authorID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthor(authorID: number, options?: any): AxiosPromise<AuthorDto> {
            return localVarFp.deleteAuthor(authorID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Books by ID
         * @param {number} bookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBook(bookID: number, options?: any): AxiosPromise<BookDto> {
            return localVarFp.deleteBook(bookID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update BookFines by ID
         * @param {number} bookFinesID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBookFine(bookFinesID: number, options?: any): AxiosPromise<BookFinesDto> {
            return localVarFp.deleteBookFine(bookFinesID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Borrowers by ID
         * @param {number} borrowerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBorrower(borrowerID: number, options?: any): AxiosPromise<BorrowerDto> {
            return localVarFp.deleteBorrower(borrowerID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Categories by ID
         * @param {number} categoryID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteCategory(categoryID: number, options?: any): AxiosPromise<CategoryDto> {
            return localVarFp.deleteCategory(categoryID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update IssuedBooks by ID
         * @param {number} issuedBookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteIssuedBook(issuedBookID: number, options?: any): AxiosPromise<IssuedBookDto> {
            return localVarFp.deleteIssuedBook(issuedBookID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Publishers by ID
         * @param {number} publisherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deletePublisher(publisherID: number, options?: any): AxiosPromise<PublisherDto> {
            return localVarFp.deletePublisher(publisherID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteUser(id: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.deleteUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Author by ID
         * @param {number} authorID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthor(authorID: number, options?: any): AxiosPromise<AuthorDto> {
            return localVarFp.getAuthor(authorID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Author
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAuthors(options?: any): AxiosPromise<AuthorDto> {
            return localVarFp.getAuthors(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Book by ID
         * @param {number} bookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBook(bookID: number, options?: any): AxiosPromise<BookDto> {
            return localVarFp.getBook(bookID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get BookFines by ID
         * @param {number} bookFinesID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookFine(bookFinesID: number, options?: any): AxiosPromise<BookFinesDto> {
            return localVarFp.getBookFine(bookFinesID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all BookFines
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBookFines(options?: any): AxiosPromise<BookFinesDto> {
            return localVarFp.getBookFines(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Book
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBooks(options?: any): AxiosPromise<BookDto> {
            return localVarFp.getBooks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Borrower by ID
         * @param {number} borrowerID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBorrower(borrowerID: number, options?: any): AxiosPromise<BorrowerDto> {
            return localVarFp.getBorrower(borrowerID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Borrower
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBorrowers(options?: any): AxiosPromise<BorrowerDto> {
            return localVarFp.getBorrowers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Category
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategories(options?: any): AxiosPromise<CategoryDto> {
            return localVarFp.getCategories(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Category by ID
         * @param {number} categoryID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCategory(categoryID: number, options?: any): AxiosPromise<CategoryDto> {
            return localVarFp.getCategory(categoryID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get IssuedBook by ID
         * @param {number} issuedBookID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuedBook(issuedBookID: number, options?: any): AxiosPromise<IssuedBookDto> {
            return localVarFp.getIssuedBook(issuedBookID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all IssuedBook
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getIssuedBooks(options?: any): AxiosPromise<IssuedBookDto> {
            return localVarFp.getIssuedBooks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get profile info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProfile(options?: any): AxiosPromise<UserDto> {
            return localVarFp.getProfile(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Publisher by ID
         * @param {number} publisherID 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublisher(publisherID: number, options?: any): AxiosPromise<PublisherDto> {
            return localVarFp.getPublisher(publisherID, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all Publisher
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPublishers(options?: any): AxiosPromise<PublisherDto> {
            return localVarFp.getPublishers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get user by id
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(id: number, options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUser(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsers(options?: any): AxiosPromise<UserDto> {
            return localVarFp.getUsers(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login User
         * @param {string} username 
         * @param {string} password 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(username: string, password: string, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.login(username, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary logout given user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        logout(options?: any): AxiosPromise<void> {
            return localVarFp.logout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Refresh Token
         * @param {RefreshDto} refreshDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        refreshToken(refreshDto: RefreshDto, options?: any): AxiosPromise<AccessTokenDto> {
            return localVarFp.refreshToken(refreshDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Register User
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        register(userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.register(userDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Author by ID
         * @param {number} authorID 
         * @param {AuthorDto} authorDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthor(authorID: number, authorDto: AuthorDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateAuthor(authorID, authorDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Book by ID
         * @param {number} bookID 
         * @param {BookDto} bookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBook(bookID: number, bookDto: BookDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateBook(bookID, bookDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update BookFines by ID
         * @param {number} bookFinesID 
         * @param {BookFinesDto} bookFinesDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBookFine(bookFinesID: number, bookFinesDto: BookFinesDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateBookFine(bookFinesID, bookFinesDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Borrower by ID
         * @param {number} borrowerID 
         * @param {BorrowerDto} borrowerDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateBorrower(borrowerID: number, borrowerDto: BorrowerDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateBorrower(borrowerID, borrowerDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Category by ID
         * @param {number} categoryID 
         * @param {CategoryDto} categoryDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateCategory(categoryID: number, categoryDto: CategoryDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateCategory(categoryID, categoryDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update IssuedBook by ID
         * @param {number} issuedBookID 
         * @param {IssuedBookDto} issuedBookDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateIssuedBook(issuedBookID: number, issuedBookDto: IssuedBookDto, options?: any): AxiosPromise<void> {
            return localVarFp.updateIssuedBook(issuedBookID, issuedBookDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Publisher by ID
         * @param {number} publisherID 
         * @param {PublisherDto} publisherDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updatePublisher(publisherID: number, publisherDto: PublisherDto, options?: any): AxiosPromise<void> {
            return localVarFp.updatePublisher(publisherID, publisherDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user by id
         * @param {number} id 
         * @param {UserDto} userDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateUser(id: number, userDto: UserDto, options?: any): AxiosPromise<UserDto> {
            return localVarFp.updateUser(id, userDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Add new Author
     * @param {AuthorDto} authorDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addAuthor(authorDto: AuthorDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addAuthor(authorDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Book
     * @param {BookDto} bookDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addBook(bookDto: BookDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addBook(bookDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new fine
     * @param {BookFinesDto} bookFinesDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addBookFines(bookFinesDto: BookFinesDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addBookFines(bookFinesDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Borrower
     * @param {BorrowerDto} borrowerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addBorrower(borrowerDto: BorrowerDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addBorrower(borrowerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Category
     * @param {CategoryDto} categoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addCategory(categoryDto: CategoryDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addCategory(categoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new IssuedBook
     * @param {IssuedBookDto} issuedBookDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addIssuedBook(issuedBookDto: IssuedBookDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addIssuedBook(issuedBookDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new Publisher
     * @param {PublisherDto} publisherDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addPublisher(publisherDto: PublisherDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addPublisher(publisherDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add new user
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public addUser(userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).addUser(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Authors by ID
     * @param {number} authorID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAuthor(authorID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteAuthor(authorID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Books by ID
     * @param {number} bookID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteBook(bookID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteBook(bookID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update BookFines by ID
     * @param {number} bookFinesID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteBookFine(bookFinesID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteBookFine(bookFinesID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Borrowers by ID
     * @param {number} borrowerID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteBorrower(borrowerID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteBorrower(borrowerID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Categories by ID
     * @param {number} categoryID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteCategory(categoryID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteCategory(categoryID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update IssuedBooks by ID
     * @param {number} issuedBookID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteIssuedBook(issuedBookID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteIssuedBook(issuedBookID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Publishers by ID
     * @param {number} publisherID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deletePublisher(publisherID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deletePublisher(publisherID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete user by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteUser(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Author by ID
     * @param {number} authorID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAuthor(authorID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAuthor(authorID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Author
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getAuthors(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getAuthors(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Book by ID
     * @param {number} bookID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBook(bookID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBook(bookID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get BookFines by ID
     * @param {number} bookFinesID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBookFine(bookFinesID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBookFine(bookFinesID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all BookFines
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBookFines(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBookFines(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Book
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBooks(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBooks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Borrower by ID
     * @param {number} borrowerID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBorrower(borrowerID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBorrower(borrowerID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Borrower
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBorrowers(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBorrowers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Category
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCategories(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCategories(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Category by ID
     * @param {number} categoryID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCategory(categoryID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getCategory(categoryID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get IssuedBook by ID
     * @param {number} issuedBookID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIssuedBook(issuedBookID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIssuedBook(issuedBookID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all IssuedBook
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getIssuedBooks(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getIssuedBooks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get profile info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getProfile(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getProfile(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Publisher by ID
     * @param {number} publisherID 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPublisher(publisherID: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPublisher(publisherID, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all Publisher
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getPublishers(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getPublishers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get user by id
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUser(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUser(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get all users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsers(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsers(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login User
     * @param {string} username 
     * @param {string} password 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(username: string, password: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).login(username, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary logout given user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public logout(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).logout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Refresh Token
     * @param {RefreshDto} refreshDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public refreshToken(refreshDto: RefreshDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).refreshToken(refreshDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Register User
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public register(userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).register(userDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Author by ID
     * @param {number} authorID 
     * @param {AuthorDto} authorDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAuthor(authorID: number, authorDto: AuthorDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateAuthor(authorID, authorDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Book by ID
     * @param {number} bookID 
     * @param {BookDto} bookDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateBook(bookID: number, bookDto: BookDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateBook(bookID, bookDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update BookFines by ID
     * @param {number} bookFinesID 
     * @param {BookFinesDto} bookFinesDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateBookFine(bookFinesID: number, bookFinesDto: BookFinesDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateBookFine(bookFinesID, bookFinesDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Borrower by ID
     * @param {number} borrowerID 
     * @param {BorrowerDto} borrowerDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateBorrower(borrowerID: number, borrowerDto: BorrowerDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateBorrower(borrowerID, borrowerDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Category by ID
     * @param {number} categoryID 
     * @param {CategoryDto} categoryDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateCategory(categoryID: number, categoryDto: CategoryDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateCategory(categoryID, categoryDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update IssuedBook by ID
     * @param {number} issuedBookID 
     * @param {IssuedBookDto} issuedBookDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateIssuedBook(issuedBookID: number, issuedBookDto: IssuedBookDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateIssuedBook(issuedBookID, issuedBookDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Publisher by ID
     * @param {number} publisherID 
     * @param {PublisherDto} publisherDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updatePublisher(publisherID: number, publisherDto: PublisherDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updatePublisher(publisherID, publisherDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user by id
     * @param {number} id 
     * @param {UserDto} userDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateUser(id: number, userDto: UserDto, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateUser(id, userDto, options).then((request) => request(this.axios, this.basePath));
    }
}


